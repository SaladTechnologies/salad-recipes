worker_processes  1;

env AUTH_TOKEN;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 0;
    keepalive_timeout 30s;
    access_log /dev/stdout;
    error_log /dev/stderr;

    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    server {
        listen      80;
        listen [::]:80;
        server_name _;


        # Internal location for model status check
        location = /_triton_repository_index {
            internal;
            proxy_pass http://127.0.0.1:8000/v2/repository/index;
            proxy_method POST;
            proxy_set_header Content-Type "application/json";
        }

        # Startup probe
        location = /startup {
            proxy_pass http://127.0.0.1:8000/v2/health/ready;
        }

        # Readiness and Liveness probes
        location ~ ^/(ready|live)$ {
            content_by_lua_block {
                -- Make subrequest to check model status
                local res = ngx.location.capture("/_triton_repository_index")

                -- Handle HTTP errors
                if res.status >= 400 then
                    ngx.log(ngx.WARN, "Model check failed: HTTP ", res.status)
                    ngx.status = 503
                    ngx.say('{"success": false, "error": "model check failed"}')
                    return
                end

                -- Parse JSON response
                local cjson = require "cjson"
                local ok, models = pcall(cjson.decode, res.body)

                if not ok then
                    ngx.log(ngx.WARN, "JSON parse failed: ", res.body)
                    ngx.status = 503
                    ngx.say('{"success": false, "error": "JSON parse failed"}')
                    return
                end

                -- Check all models are ready
                for _, model in ipairs(models) do
                    if model.state ~= "READY" then
                        ngx.log(ngx.WARN, "Model not ready: ",
                                model.name or "unknown", " state: ", model.state or "unknown")
                        ngx.status = 503
                        ngx.say('{"success": false, "error": "model not ready"}')
                        return
                    end
                end

                -- All models ready
                ngx.log(ngx.INFO, "All models ready")
                ngx.status = 200
                ngx.say('{"success": true}')
            }
        }

        # Inference endpoint
        location ~ ^/v2/models/(?<model_name>[^/]+)/infer$ {
            if ($request_method != POST) {
                return 405;
            }

            access_by_lua_block {
                local auth_token = os.getenv("AUTH_TOKEN")

                -- Skip auth if token not set
                if not auth_token or auth_token == "" then
                    ngx.log(ngx.INFO, "AUTH_TOKEN not set, skipping authorization")
                    return
                end

                -- Get Authorization header
                local auth_header = ngx.var.http_Authorization
                if not auth_header then
                    ngx.log(ngx.WARN, "Missing Authorization header")
                    return ngx.exit(401)
                end

                -- Extract token
                local token = auth_header:match("^Bearer%s+(.+)$")
                if not token then
                    ngx.log(ngx.WARN, "Invalid Authorization format: ", auth_header)
                    return ngx.exit(401)
                end

                -- Validate token
                if token ~= auth_token then
                    ngx.log(ngx.WARN, "Invalid authorization token")
                    return ngx.exit(401)
                end

                ngx.log(ngx.INFO, "Authorization successful")
            }


            proxy_pass http://127.0.0.1:8000/v2/models/$model_name/infer;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 300s;
        }

        # Metadata endpoint
        location = /api/metadata {
            proxy_pass http://127.0.0.1:8003$request_uri;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

         location / {
            return 403;
        }
    }
}