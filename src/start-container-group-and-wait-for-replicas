#! /usr/bin/env bash

set -e

usage="Usage: ./$0 --org <org> --project <project> --container-group <container-group> --replicas <replicas>"

while [ "$1" != "" ]; do
  case $1 in
  --org)
    shift
    org=$1
    ;;
  --project)
    shift
    project=$1
    ;;
  --container-group)
    shift
    container_group=$1
    ;;
  --replicas)
    shift
    replicas=$1
    ;;
  *)
    echo $usage
    exit 1
    ;;
  esac
  shift
done

if [ -z "$org" ] || [ -z "$project" ] || [ -z "$container_group" ] || [ -z "$replicas" ]; then
  echo $usage
  exit 1
fi

if [ -z "$SALAD_API_KEY" ]; then
  echo "Please set the SALAD_API_KEY environment variable"
  exit 1
fi

baseURL="https://api.salad.com/api/public/organizations/${org}/projects/${project}/containers/${container_group}"

function getCurrentStatus() {
  cg=$(curl -s -X GET \
    -H "Salad-Api-Key: $SALAD_API_KEY" \
    $baseURL)
  status=$(echo $cg | jq -r '.current_state.status')
  echo $status
}

function startContainerGroup() {
  curl -s -X POST \
    -H "Salad-Api-Key: $SALAD_API_KEY" \
    $baseURL/start
}

function getConfiguredReplicas() {
  cg=$(
    curl -s -X GET \
      -H "Salad-Api-Key: $SALAD_API_KEY" \
      $baseURL
  )
  replicas=$(echo $cg | jq -r '.replicas')
  echo $replicas
}

function setReplicas() {
  cg=$(
    curl -s -X PATCH \
      -H "Salad-Api-Key: $SALAD_API_KEY" \
      -H "Content-Type: application/merge-patch+json" \
      -d "{\"replicas\": $replicas}" \
      $baseURL
  )
}

function getRunningReplicas() {
  cg=$(
    curl -s -X GET \
      -H "Salad-Api-Key: $SALAD_API_KEY" \
      $baseURL
  )
  running=$(echo $cg | jq -r '.current_state.instance_status_counts.running_count')
  echo $running
}

currentState=$(getCurrentStatus)
echo "Current state: $currentState"
if [[ "$currentState" == "stopped" ]]; then
  echo "Starting container group"
  startContainerGroup
fi

configuredReplicas=$(getConfiguredReplicas)
if [[ "$configuredReplicas" -lt "$replicas" ]]; then
  echo "Setting replicas to $replicas"
  setReplicas
fi

runningReplicas=$(getRunningReplicas)
while [[ "$runningReplicas" -lt "$replicas" ]]; do
  echo "$runningReplicas out of $replicas replicas running. Waiting 30s..."
  sleep 30
  runningReplicas=$(getRunningReplicas)
done

echo "All $replicas replicas are running"
